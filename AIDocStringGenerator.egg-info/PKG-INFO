Metadata-Version: 2.1
Name: AIDocStringGenerator
Version: 1.0
Summary: AIDocStringGenerator is an automated tool that utilizes AI technologies like Claude and OpenAI GPT-3.5 to generate and manage docstrings in Python code. It streamlines documentation by processing both single files and entire directories, offering customizable settings for docstring verbosity and style. This tool is ideal for enhancing code readability and maintainability in Python projects.
Home-page: https://github.com/fantasiiio/AIDocStringGenerator
Author: Francois Girard
Author-email: fantasiiio@hotmail.com
Description-Content-Type: text/markdown
Requires-Dist: annotated-types==0.6.0
Requires-Dist: anyio==4.2.0
Requires-Dist: bardapi==0.1.38
Requires-Dist: beautifulsoup4==4.12.2
Requires-Dist: browser-cookie3==0.19.1
Requires-Dist: cachetools==5.3.2
Requires-Dist: certifi==2023.11.17
Requires-Dist: charset-normalizer==3.3.2
Requires-Dist: colorama==0.4.6
Requires-Dist: deep-translator==1.11.4
Requires-Dist: distro==1.8.0
Requires-Dist: google-api-core==2.15.0
Requires-Dist: google-auth==2.25.2
Requires-Dist: google-cloud-core==2.4.1
Requires-Dist: google-cloud-translate==3.13.0
Requires-Dist: googleapis-common-protos==1.62.0
Requires-Dist: grpcio==1.60.0
Requires-Dist: grpcio-status==1.60.0
Requires-Dist: h11==0.14.0
Requires-Dist: h2==4.1.0
Requires-Dist: hpack==4.0.0
Requires-Dist: httpcore==1.0.2
Requires-Dist: httpx==0.26.0
Requires-Dist: hyperframe==6.0.1
Requires-Dist: idna==3.6
Requires-Dist: langdetect==1.0.9
Requires-Dist: lz4==4.3.2
Requires-Dist: openai==1.6.1
Requires-Dist: proto-plus==1.23.0
Requires-Dist: protobuf==4.25.1
Requires-Dist: pyasn1==0.5.1
Requires-Dist: pyasn1-modules==0.3.0
Requires-Dist: pycryptodomex==3.19.0
Requires-Dist: pydantic==2.5.3
Requires-Dist: pydantic_core==2.14.6
Requires-Dist: python-dotenv==1.0.0
Requires-Dist: requests==2.31.0
Requires-Dist: rsa==4.9
Requires-Dist: setuptools==69.0.2
Requires-Dist: six==1.16.0
Requires-Dist: sniffio==1.3.0
Requires-Dist: soupsieve==2.5
Requires-Dist: tqdm==4.66.1
Requires-Dist: typing_extensions==4.9.0
Requires-Dist: urllib3==2.1.0

### AIDocStringGenerator: Overview and Purpose

**AIDocStringGenerator** is an advanced Python tool engineered to streamline the task of creating and updating docstrings in Python source files. Utilizing cutting-edge AI technologies like Claude and OpenAI GPT4-Turbo, this application delivers high-quality, context-aware docstrings that significantly enhance code readability and maintainability.

**Key Features**:

1.  **AI-Powered Docstring Generation**: Integrates with AI assistant APIs to generate detailed and accurate docstrings for Python classes, methods, and functions.
    
2.  **Flexible File Processing**: Capable of handling both individual Python files and entire directories, making it suitable for projects of any scale.
    
3.  **Configurable Operations**: Users can customize the behavior through a configuration file (`config.json`), allowing control over aspects like target paths, verbosity levels, and choice of AI model.
    
4.  **Verbose Output**: Offers an optional verbose mode, providing comprehensive logs of the docstring generation process, ideal for debugging and insight into the tool's operations.
    
5.  **Existing Docstring Management**: Includes an option to wipe out existing docstrings before generating new ones, ensuring a clean and updated state of documentation.
    
6.  **Large Codebase Handling**: Efficiently processes large codebases by splitting the source code into smaller parts, thereby managing API limitations and ensuring thorough coverage.
    
7.  **API Key Management**: Supports secure API key integration for accessing AI services, ensuring safe and authorized use of AI technologies.
    

**Use Cases**:

-   **Automated Documentation**: Ideal for projects lacking comprehensive docstrings, where manual documentation is time-consuming or infeasible.
-   **Codebase Refactoring**: Assists in updating and standardizing docstrings during large-scale code refactoring and reviews.
-   **Educational Tool**: Useful for educational purposes, helping students and new developers understand the importance of documentation and observe AI-generated examples.
    

### Target Audience

The Docstring Generator is particularly useful for:

-   **Developers and Teams**: Especially those working on large or complex Python projects who want to maintain high-quality, consistent documentation.
    
-   **Open Source Contributors**: Helps maintain clear and comprehensive documentation in open source projects.
    
-   **Organizations Emphasizing Code Quality**: Organizations that value code readability and maintainability as part of their development standards.
    

### How to Use the Docstring Generator

#### Prerequisites

-   Python installed on your system.
-   Basic familiarity with Python programming.
-   Access to AI services like Claude or GPT-3.5 (if using AI-based generation).

#### Setup and Configuration

1.  **Install the Package**: If the tool is packaged and available on PyPI, you can install it using pip:
    
        `pip install AIDocStringGenerator` 
		`AIDocStringGenerator` 
    

2.  **Configure the Tool**: Modify the `config.json` file to set up your preferences. Important configurations include:
    
    -   Path to the source files.
    -   AI service settings (API keys, service URLs).
    -   Flags for verbose output, wiping existing docstrings, etc.

#### Running the Generator

1.  **Process Files or Directories**:
    
    -   Use the tool to process a single file or an entire directory of Python files.
    -   The tool can be run from a command line or integrated into a larger Python project.
2.  **Review Generated Docstrings**:
    
    -   After running, review the generated docstrings to ensure they accurately reflect the codeâ€™s functionality.
    -   Make manual adjustments if necessary for clarity or accuracy.

#### Advanced Usage

-   **Custom Templates**: If the tool allows, customize the templates used for generating docstrings to suit your projectâ€™s style or requirements.
    
-   **Integrating with Version Control**: Automate docstring generation as part of your version control workflow, like a pre-commit hook in Git.
    
-   **Continuous Integration**: Include the Docstring Generator in your CI pipeline to ensure that all new code comes with proper documentation.
    

### Best Practices

-   **Regularly Update**: Run the generator regularly to keep documentation up-to-date with the latest code changes.
-   **Manual Review**: Always review and possibly refine automatically generated docstrings to ensure accuracy and relevance.
-   **Secure API Keys**: Keep your API keys secure and do not expose them in shared or public environments.
-   **Adhere to Python Standards**: Follow PEP 257 docstring conventions to maintain consistency and readability.

### Conclusion

The Docstring Generator represents a significant leap in automating a crucial aspect of software development - documentation. It is particularly valuable for large-scale projects where manual documentation can be time-consuming and prone to inconsistencies. By leveraging AI and customizable templates, it offers a robust solution to maintain high-quality, consistent, and up-to-date documentation for Python codebases
 

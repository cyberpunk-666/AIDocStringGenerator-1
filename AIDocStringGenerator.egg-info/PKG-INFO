Metadata-Version: 2.1
Name: AIDocStringGenerator
Version: 1.0
Summary: AIDocStringGenerator is an automated tool that utilizes AI technologies like Claude and OpenAI GPT-3.5 to generate and manage docstrings in Python code. It streamlines documentation by processing both single files and entire directories, offering customizable settings for docstring verbosity and style. This tool is ideal for enhancing code readability and maintainability in Python projects.
Home-page: https://github.com/fantasiiio/AIDocStringGenerator
Author: Francois Girard
Author-email: fantasiiio@hotmail.com
Description-Content-Type: text/markdown
License-File: LICENCE
Requires-Dist: annotated-types==0.6.0
Requires-Dist: anyio==4.2.0
Requires-Dist: bardapi==0.1.38
Requires-Dist: beautifulsoup4==4.12.2
Requires-Dist: browser-cookie3==0.19.1
Requires-Dist: cachetools==5.3.2
Requires-Dist: certifi==2023.11.17
Requires-Dist: charset-normalizer==3.3.2
Requires-Dist: colorama==0.4.6
Requires-Dist: deep-translator==1.11.4
Requires-Dist: distro==1.8.0
Requires-Dist: google-api-core==2.15.0
Requires-Dist: google-auth==2.25.2
Requires-Dist: google-cloud-core==2.4.1
Requires-Dist: google-cloud-translate==3.13.0
Requires-Dist: googleapis-common-protos==1.62.0
Requires-Dist: grpcio==1.60.0
Requires-Dist: grpcio-status==1.60.0
Requires-Dist: h11==0.14.0
Requires-Dist: h2==4.1.0
Requires-Dist: hpack==4.0.0
Requires-Dist: httpcore==1.0.2
Requires-Dist: httpx==0.26.0
Requires-Dist: hyperframe==6.0.1
Requires-Dist: idna==3.6
Requires-Dist: langdetect==1.0.9
Requires-Dist: lz4==4.3.2
Requires-Dist: openai==1.6.1
Requires-Dist: proto-plus==1.23.0
Requires-Dist: protobuf==4.25.1
Requires-Dist: pyasn1==0.5.1
Requires-Dist: pyasn1-modules==0.3.0
Requires-Dist: pycryptodomex==3.19.0
Requires-Dist: pydantic==2.5.3
Requires-Dist: pydantic_core==2.14.6
Requires-Dist: python-dotenv==1.0.0
Requires-Dist: requests==2.31.0
Requires-Dist: rsa==4.9
Requires-Dist: setuptools==69.0.2
Requires-Dist: six==1.16.0
Requires-Dist: sniffio==1.3.0
Requires-Dist: soupsieve==2.5
Requires-Dist: tqdm==4.66.1
Requires-Dist: typing_extensions==4.9.0
Requires-Dist: urllib3==2.1.0

### AIDocStringGenerator: Overview and Purpose

**AIDocStringGenerator** is an advanced Python tool engineered to streamline the task of creating and updating docstrings in Python source files. Utilizing cutting-edge AI technologies like Claude and OpenAI GPT-3.5, this application delivers high-quality, context-aware docstrings that significantly enhance code readability and maintainability.

**Key Features**:

1.  **AI-Powered Docstring Generation**: Integrates with AI assistant APIs to generate detailed and accurate docstrings for Python classes, methods, and functions.
    
2.  **Flexible File Processing**: Capable of handling both individual Python files and entire directories, making it suitable for projects of any scale.
    
3.  **Configurable Operations**: Users can customize the behavior through a configuration file (`config.json`), allowing control over aspects like target paths, verbosity levels, and choice of AI model.
    
4.  **Verbose Output**: Offers an optional verbose mode, providing comprehensive logs of the docstring generation process, ideal for debugging and insight into the tool's operations.
    
5.  **Existing Docstring Management**: Includes an option to wipe out existing docstrings before generating new ones, ensuring a clean and updated state of documentation.
    
6.  **Large Codebase Handling**: Efficiently processes large codebases by splitting the source code into smaller parts, thereby managing API limitations and ensuring thorough coverage.
    
7.  **API Key Management**: Supports secure API key integration for accessing AI services, ensuring safe and authorized use of AI technologies.
    

**Use Cases**:

-   **Automated Documentation**: Ideal for projects lacking comprehensive docstrings, where manual documentation is time-consuming or infeasible.
-   **Codebase Refactoring**: Assists in updating and standardizing docstrings during large-scale code refactoring and reviews.
-   **Educational Tool**: Useful for educational purposes, helping students and new developers understand the importance of documentation and observe AI-generated examples.
    

### Target Audience

The Docstring Generator is particularly useful for:

-   **Developers and Teams**: Especially those working on large or complex Python projects who want to maintain high-quality, consistent documentation.
    
-   **Open Source Contributors**: Helps maintain clear and comprehensive documentation in open source projects.
    
-   **Organizations Emphasizing Code Quality**: Organizations that value code readability and maintainability as part of their development standards.
    

### How to Use the Docstring Generator

#### Prerequisites

-   Python installed on your system.
-   Basic familiarity with Python programming.
-   Access to AI services like Claude or GPT-4


### Basic Setup and Configuration

1.  **Install the Package**: If the tool is available on PyPI, install it using pip:
    
    `pip install AIDocStringGenerator` 
    
2.  **Initial Configuration**:
    
    -   Locate and rename `config_template.json` to `config.json` in the installed package directory.

3.  **Configuration Parameters**:
    
    -   `path`: The file or directory path to process.
    -   `wipe_docstrings`: If `true`, existing docstrings in files will be wiped before generating new ones.
    -   `verbose`: Enable verbose output if set to `true`.
    -   `bot`: Specify the AI bot to use (**gpt3.5, gpt4, gpt4-120k, claude, file**).
    -   `bot_response_file`: parameter allows you to specify the name of a file or an array of files containing pre-defined responses. When this mode is active, instead of receiving live responses from an AI bot, the tool reads and uses responses from the specified file(s). This feature is particularly useful for emulating multi-part responses, where each file in the array represents a different part of a sequential response. This option can be beneficial in scenarios where direct interaction with an AI bot is not feasible, or when testing and debugging with predetermined responses."
    -   `bard_api_key`, `openai_api_key`, `claude_api_key`: API keys for the respective AI services.
    -   `include_subfolders`: Set to `true` to include subfolders in processing.
    -   `verbosity_level`: Specifies verbosity level, e.g., "5 for class and 2 for functions".
    -   `keep_responses`: If `true`, keeps the bot responses.
    -   `ignore`: An array of strings containing file or directory names to exclude from processing. The tool skips any file or directory whose name matches an entry in this array. This is useful for omitting irrelevant or sensitive files and directories from the process. The matching is based on the name only, not the full path.


4.  **Command Line Overrides**:
    
    -   Command line arguments allow you to override settings in `config.json`.
    -   Example command:
        
        bashCopy code
        
        `AIDocStringGenerator --path "/path/to/source" --verbose --wipe_docstrings --bot "claude" --include_subfolders --verbosity_level "5"` 
        

### Continuous Integration (CI) Setup

1.  **Use Command Line Parameters in CI**:
    
    -   In CI environments (e.g., Jenkins, GitHub Actions), prefer command line parameters for configuration.
    -   This allows for dynamic adjustment of settings per CI run.
2.  **Secure API Keys with CI Secrets**:
    
    -   Store sensitive data like API keys as environment secrets in your CI system.
    -   Refer to these secrets in the command line arguments to ensure security.
3.  **Example CI Configuration** (for GitHub Actions):
    
```yaml
steps:
- name: Run AIDocStringGenerator
  run: |
    AIDocStringGenerator --path "$GITHUB_WORKSPACE/path/to/source" \
                         --verbose \
                         --wipe_docstrings \
                         --bot "claude" \
                         --include_subfolders \
                         --verbosity_level "5" \
                         --bard_api_key ${{ secrets.BARD_API_KEY }} \
                         --openai_api_key ${{ secrets.OPENAI_API_KEY }} \
                         --claude_api_key ${{ secrets.CLAUDE_API_KEY }}
```  

 In this GitHub Actions example:    
    -   `$GITHUB_WORKSPACE` is an environment variable indicating the workspace directory.
    -   `secrets.BARD_API_KEY`, `secrets.OPENAI_API_KEY`, and `secrets.CLAUDE_API_KEY` are GitHub Actions secrets containing the API keys.
    
4.  **Setting Up Secrets in GitHub Actions**:
    
    -   Add API keys as secrets in the repository's Settings under 'Secrets'.
    -   Ensure the names of the secrets in GitHub match those used in the command.

#### Running the Generator

### Running the Generator

1.  **Process Files or Directories**:
    
    -   The tool is capable of processing either a single Python file or an entire directory containing multiple Python files.
    -   To run the tool, use the command line interface. Hereâ€™s a basic example of how to execute the tool:
    
        `AIDocStringGenerator --path "/path/to/python/files" --verbose` 
        
    -   This command processes Python files located at `"/path/to/python/files"`, with verbose output enabled.
    - 
2.  **Integration into Larger Projects**:
    
    -   If youâ€™re integrating the tool into a larger Python project, you can call it within your Python scripts or setup automated scripts to run it as part of your development workflow.

5.  **Continuous Integration**:
    
    -   For continuous integration setups, consider using command line parameters with environment variables or CI secrets, especially for API keys. This ensures that the tool can be dynamically configured based on the CI environment while keeping sensitive information secure.

#### Advanced Usage

-   **Custom Templates**: If the tool allows, customize the templates used for generating docstrings to suit your projectâ€™s style or requirements.
    
-   **Continuous Integration**: Include the Docstring Generator in your CI pipeline to ensure that all new code comes with proper documentation.
    

### Best Practices

-   **Regularly Update**: Run the generator regularly to keep documentation up-to-date with the latest code changes.
-   **Manual Review**: Always review and possibly refine automatically generated docstrings to ensure accuracy and relevance.
-   **Secure API Keys**: Keep your API keys secure and do not expose them in shared or public environments.
-   **Adhere to Python Standards**: Follow PEP 257 docstring conventions to maintain consistency and readability.

### Conclusion

The Docstring Generator represents a significant leap in automating a crucial aspect of software development - documentation. It is particularly valuable for large-scale projects where manual documentation can be time-consuming and prone to inconsistencies. By leveraging AI and customizable templates, it offers a robust solution to maintain high-quality, consistent, and up-to-date documentation for Python codebases
 
